// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Size {
  id        String   @id @default(cuid())
  nama      String   @unique
  harga     BigInt
  Baju      Baju[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warna {
  id            String          @id @default(cuid())
  nama          String          @unique
  kodeWarna     String
  GrupWarnaBaju GrupWarnaBaju[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Merek {
  id        String   @id @default(cuid())
  nama      String   @unique
  Baju      Baju[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Baju {
  id              String         @id @default(cuid())
  jumlahDepan     Int
  jumlahBelakang  Int
  size            Size           @relation(fields: [sizeId], references: [id])
  sizeId          String
  grupWarnaBaju   GrupWarnaBaju? @relation(fields: [grupWarnaBajuId], references: [id])
  grupWarnaBajuId String?
  merek           Merek?         @relation(fields: [merekId], references: [id])
  merekId         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model GrupWarnaBaju {
  id                String              @id @default(cuid())
  warna             Warna               @relation(fields: [warnaId], references: [id])
  warnaId           String
  seriProduksi      SeriProduksi?       @relation(fields: [seriProduksiId], references: [id])
  seriProduksiId    String?
  karyawanName      String
  baju              Baju[]
  RekapGajiKaryawan RekapGajiKaryawan[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model SeriProduksi {
  id            String          @id @default(cuid())
  nama          String?
  nomorSeri     BigInt          @unique
  GrupWarnaBaju GrupWarnaBaju[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Karyawan {
  id                String              @id @default(cuid())
  nama              String
  telepon           String
  RekapGajiKaryawan RekapGajiKaryawan[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// When querying the salary, must get all of the entry
// of a given time which points to the same karyawan ID 
model RekapGajiKaryawan {
  id              String         @id @default(cuid())
  jumlahGaji      BigInt
  grupWarnaBaju   GrupWarnaBaju? @relation(fields: [grupWarnaBajuId], references: [id])
  grupWarnaBajuId String?
  karyawanId      String
  Karyawan        Karyawan       @relation(fields: [karyawanId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
