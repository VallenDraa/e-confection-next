// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Size {
  id                String              @id @default(uuid())
  nama              String
  afterCommaPairId  String?             @unique
  afterComma        Size?               @relation("SizePair", fields: [afterCommaPairId], references: [id])
  beforeComma       Size?               @relation("SizePair")
  harga             Int
  baju              Baju[]
  softDelete        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  rekapGajiKaryawan RekapGajiKaryawan[]
}

model Warna {
  id            String          @id @default(uuid())
  nama          String
  kodeWarna     String
  softDelete    DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  grupWarnaBaju GrupWarnaBaju[]
  baju          Baju[]
}

model Merek {
  id                String              @id @default(uuid())
  nama              String
  baju              Baju[]
  softDelete        DateTime?
  rekapGajiKaryawan RekapGajiKaryawan[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Baju {
  id                  String            @id @default(uuid())
  jumlahDepan         Int
  jumlahBelakang      Int
  seriProduksiId      String
  seriProduksi        SeriProduksi      @relation(fields: [seriProduksiId], references: [id])
  rekapGajiKaryawanId String
  rekapGajiKaryawan   RekapGajiKaryawan @relation(fields: [rekapGajiKaryawanId], references: [id])
  karyawan            Karyawan          @relation(fields: [karyawanId], references: [id])
  karyawanId          String
  size                Size              @relation(fields: [sizeId], references: [id])
  sizeId              String
  warnaId             String
  warna               Warna             @relation(fields: [warnaId], references: [id])
  grupWarnaBaju       GrupWarnaBaju     @relation(fields: [grupWarnaBajuId], references: [id])
  grupWarnaBajuId     String
  merek               Merek?            @relation(fields: [merekId], references: [id])
  merekId             String?
  softDelete          DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model GrupWarnaBaju {
  id                String              @id @default(uuid())
  warna             Warna               @relation(fields: [warnaId], references: [id])
  warnaId           String
  seriProduksi      SeriProduksi        @relation(fields: [seriProduksiId], references: [id])
  seriProduksiId    String
  baju              Baju[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  rekapGajiKaryawan RekapGajiKaryawan[]
}

model SeriProduksi {
  id                String              @id @default(uuid())
  nama              String?
  nomorSeri         Int                 @unique
  grupWarnaBaju     GrupWarnaBaju[]
  rekapGajiKaryawan RekapGajiKaryawan[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  baju              Baju[]
}

model Karyawan {
  id                String              @id @default(uuid())
  nama              String
  telepon           String
  rekapGajiKaryawan RekapGajiKaryawan[]
  baju              Baju[]
  softDelete        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model RekapGajiKaryawan {
  id              String        @id @default(uuid())
  sizeId          String
  size            Size          @relation(fields: [sizeId], references: [id])
  jumlahGaji      Int
  grupWarnaBajuId String
  grupWarnaBaju   GrupWarnaBaju @relation(fields: [grupWarnaBajuId], references: [id])
  karyawanId      String
  karyawan        Karyawan      @relation(fields: [karyawanId], references: [id])
  merekId         String?
  merek           Merek?        @relation(fields: [merekId], references: [id])
  seriProduksiId  String
  seriProduksi    SeriProduksi  @relation(fields: [seriProduksiId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  baju            Baju[]
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  name          String
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
